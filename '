#include "main.h"

/**
 * print_unsigned - Prints an unsigned number in different formats
 * @types: List of arguments
 * @buffer: Buffer array to handle print
 * @flags: Calculates active flags
 * @width: Width specification
 * @precision: Precision specification
 * @size: Size specifier
 * @base: Base of the number system to use for printing (e.g. 8 for octal, 10 for decimal, 16 for hexadecimal)
 * @map_to: Array of values to map the number to for hexadecimal printing
 * @hex_prefix: Prefix to add for hexadecimal printing if F_HASH flag is set
 *
 * Return: Number of chars printed
 */
int print_unsigned(va_list types, char buffer[], int flags, int width, int precision, int size, int base, const char *map_to, const char *hex_prefix)
{
	int i = BUFF_SIZE - 2;
        unsigned long int num = va_arg(types, unsigned long int);
        unsigned long int init_num = num;

        UNUSED(width);

        num = convert_size_unsgnd(num, size);

        if (num == 0)
		buffer[i--] = '0';

        buffer[BUFF_SIZE - 1] = '\0';

        while (num > 0)
        {
        	buffer[i--] = map_to[num % base];
        	num /= base;
        }

        if (flags & F_HASH && init_num != 0)
        {
        	buffer[i--] = hex_prefix[0];
        	buffer[i--] = hex_prefix[1];
    	}

    	i++;

    	return (write_unsgnd(0, i, buffer, flags, width, precision, size));
}
